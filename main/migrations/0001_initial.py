# Generated by Django 5.1.4 on 2025-01-14 13:32

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.utils.timezone
import main.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Meal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Day_of_month', models.IntegerField(default=main.models.Meal.get_next_day, validators=[django.core.validators.MinValueValidator(1, message='Day must be at least 1'), django.core.validators.MaxValueValidator(31, message='Day cannot exceed 31')], verbose_name='Day of Month')),
                ('breakfast_menu', models.TextField(blank=True)),
                ('lunch_menu', models.TextField(blank=True)),
                ('teatime_menu', models.TextField(blank=True)),
                ('dinner_menu', models.TextField(blank=True)),
            ],
            options={
                'ordering': ['Day_of_month'],
            },
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('age', models.PositiveIntegerField(blank=True, null=True)),
                ('job_title', models.CharField(max_length=200)),
                ('job_duties', models.TextField(blank=True)),
                ('phone', models.CharField(blank=True, max_length=20, unique=True)),
                ('home_address', models.TextField(blank=True)),
                ('photo', models.ImageField(blank=True, upload_to='photos/%Y/%m/%d/')),
                ('hire_date', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('staff_type', models.CharField(choices=[('General', 'General'), ('Specialist', 'Specialist')], default='General', max_length=10)),
                ('groups', models.ManyToManyField(blank=True, related_name='staff_groups', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='staff_user_permissions', to='auth.permission')),
            ],
            options={
                'verbose_name': 'Staff',
                'verbose_name_plural': 'Staff',
                'db_table': 'staff',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
